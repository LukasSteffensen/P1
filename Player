package com.Lukas.Mario.platformer.objects;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.LinkedList;

import com.Lukas.Mario.Window.Camera;
import com.Lukas.Mario.Window.Game;
import com.Lukas.Mario.Window.Handler;
import com.Lukas.Mario.Window.Questions;
import com.Lukas.Mario.platformer.framework.GameObject;
import com.Lukas.Mario.platformer.framework.ObjectId;
import com.Lukas.Mario.platformer.framework.Texture;

public class Player extends GameObject {

	private float width = 32, height = 64;

	private double gravity = 0.35;
	private double sidewaysGravity = 0.05;
	private final float MAX_SPEED = 10;
	private float maxVelX = 5;
	private Handler handler;

	Texture tex = Game.getInstance();

	public Player(float x, float y, Handler handler, Camera cam, ObjectId id) {
		super(x, y, id);
		this.handler = handler;
	}

	public void tick(LinkedList<GameObject> object) {
		x += velX;
		y += velY;
		
		ice();
		
		if (Game.score >= 100) {
			Game.score = 0;
			Game.lives++;
		}
		if (Game.lives == 0) {
			y = 96;
			x = 100;
		}
		if (falling || jumping) {
			velY += gravity;

			if (velY > MAX_SPEED)
				velY = MAX_SPEED;
		}
		if(velX > maxVelX) {
			velX = maxVelX;
		}
		collision(object);

	}
	
	public void ice() {
		if (Game.LEVEL == 3) {
			if (velX > 0) {
				velX -= sidewaysGravity;
			}
			if (velX < 0) {
				velX += sidewaysGravity;
			}
		}
	}

	private void collision(LinkedList<GameObject> object) {
		for (int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);

			if (tempObject.getId() == ObjectId.InfoBlock) {
				// top Collision
				if (getBoundsTop().intersects(tempObject.getBoundsTop())) {
					y = tempObject.getY() + 32;
					velY = 0;
					if (Game.info1 == 0) {
						Game.info1 = 1;
					}
				}

				// Bottom Collision
				if (getBounds().intersects(tempObject.getBounds())) {
					y = tempObject.getY() - height;
					velY = 0;
					falling = false;
					jumping = false;
					Game.jumps = 0;
				} else {
					falling = true;
				}

				// Right Collision
				if (getBoundsRight().intersects(tempObject.getBounds())) {
					x = tempObject.getX() - 32;

				}

				// Left Collision
				if (getBoundsLeft().intersects(tempObject.getBounds())) {
					x = tempObject.getX() + 32;

				}

			}

			if (tempObject.getId() == ObjectId.Enemy) {

				if (getBoundsTop().intersects(tempObject.getBounds())
						|| getBoundsRight().intersects(tempObject.getBoundsLeft())
						|| getBoundsLeft().intersects(tempObject.getBoundsRight())) {
					if (Game.LEVEL == 1) {
						y = 700;
						velY = 0;
						x = 132;
						Game.lives--;
					} else if (Game.LEVEL == 2) {
						y = 1984;
						x = 3552;
						Game.lives--;
					}
				}

				if (getBounds().intersects(tempObject.getBoundsTop())) {
					handler.removeObject(tempObject);
					velY = -10;
				}
			}
			if (tempObject.getId() == ObjectId.Bullet) {

				if (getBoundsTop().intersects(tempObject.getBounds())
						|| getBoundsRight().intersects(tempObject.getBoundsLeft())
						|| getBoundsLeft().intersects(tempObject.getBoundsRight())) {
					if (Game.LEVEL == 1) {
						y = 700;
						velY = 0;
						x = 132;
						Game.lives--;
					} else if (Game.LEVEL == 2) {
						y = 1984;
						x = 3552;
						Game.lives--;
					}
				}

				if (getBounds().intersects(tempObject.getBoundsTop())) {
					velY = -10;
				}
			}

			if (tempObject.getId() == ObjectId.Boss2) {

				if (getBounds().intersects(tempObject.getBoundsTop())) {
					velY = -10;
					velX = -15;
					Game.jumps = 2;
					Game.boss2Health -= 25;

					if (Game.boss2Health == 0) {
						handler.removeObject(tempObject);
					}
				}
				if (getBoundsLeft().intersects(tempObject.getBoundsRight())
						|| getBoundsRight().intersects(tempObject.getBoundsLeft())
						|| getBoundsTop().intersects(tempObject.getBounds())) {
					y = 1984;
					x = 3552;
					Game.lives--;
				}
			}
			if (tempObject.getId() == ObjectId.Boss1) {

				if (getBounds().intersects(tempObject.getBoundsTop())) {
					velY = -10;
					velX = -15;
					Game.jumps = 2;
					Game.boss1Health -= 25;

					if (Game.boss1Health == 0) {
						handler.removeObject(tempObject);
					}
				}
				if (getBoundsLeft().intersects(tempObject.getBoundsRight())
						|| getBoundsRight().intersects(tempObject.getBoundsLeft())
						|| getBoundsTop().intersects(tempObject.getBounds())) {
					y = 1984;
					x = 3552;
					Game.lives--;
				}
			}
			if (tempObject.getId() == ObjectId.Boss) {

				if (getBounds().intersects(tempObject.getBoundsTop())) {
					velY = -10;
					velX = -15;
					Game.jumps = 2;
					Game.bossHealth -= 25;

					if (Game.bossHealth == 0) {
						handler.removeObject(tempObject);
						handler.addObject(new Flag(4832, 2080, ObjectId.Flag));
					}
				}
				if (getBoundsLeft().intersects(tempObject.getBoundsRight())
						|| getBoundsRight().intersects(tempObject.getBoundsLeft())
						|| getBoundsTop().intersects(tempObject.getBounds())) {
					y = 1984;
					x = 3552;
					Game.lives--;
				}
			}

			if (tempObject.getId() == ObjectId.Block) {
				// Top Collision
				if (getBoundsTop().intersects(tempObject.getBounds())) {
					y = tempObject.getY() + height - 32;
					velY = 0;
				}
				// Bottom Collision
				if (getBounds().intersects(tempObject.getBounds())) {
					y = tempObject.getY() - height;
					velY = 0;
					falling = false;
					jumping = false;
					Game.jumps = 0;
				} else {
					falling = true;
				}

				// Right Collision
				if (getBoundsRight().intersects(tempObject.getBounds())) {
					x = tempObject.getX() - 34;
					if(Game.LEVEL == 3) {
					velX = 0;
					}
				}

				// Left Collision
				if (getBoundsLeft().intersects(tempObject.getBounds())) {
					x = tempObject.getX() + 34;
					if(Game.LEVEL == 3) {
					velX = 0;
					}
				}

			}

			if (tempObject.getId() == ObjectId.DeathBlock) {
				// Top Collision
				if (getBoundsTop().intersects(tempObject.getBounds())) {
					y = tempObject.getY() + 32;
					velY = 0;
				}

				// Bottom Collision
				if (getBounds().intersects(tempObject.getBounds())) {
					y = 700;
					velY = 0;
					x = 120;
					Game.lives--;
				}

				// Right Collision
				if (getBoundsRight().intersects(tempObject.getBounds())) {
					x = tempObject.getX() - 32;

				}

				// Left Collision
				if (getBoundsLeft().intersects(tempObject.getBounds())) {
					x = tempObject.getX() + 32;

				}

			}
			if (tempObject.getId() == ObjectId.Coin) {

				// Top Collision
				if (getBoundsTop().intersects(tempObject.getBounds()) || getBounds().intersects(tempObject.getBounds())
						|| getBoundsRight().intersects(tempObject.getBounds())
						|| getBoundsLeft().intersects(tempObject.getBounds())) {
					handler.removeObject(tempObject);
					Game.score++;
				}

			}

			if (tempObject.getId() == ObjectId.Flag) {
				// switch level
				if (getBounds().intersects(tempObject.getBounds())) {
					if (Questions.correct >= 2) {
						handler.switchLevel();
						Game.LEVEL++;
					}

				}
			}

			if (tempObject.getId() == ObjectId.GoToQuestions && Game.LEVEL == 1) {
				// top Collision
				if (getBoundsTop().intersects(tempObject.getBoundsTop())) {
					y = tempObject.getY() + 32;
					velY = 0;
					Questions.counter = 0;
					Questions.correct = 0;
					Questions.wrong = 0;
					if (Questions.counter < 1)
						Game.paused = true;
				}

				// Bottom Collision
				if (getBounds().intersects(tempObject.getBounds())) {
					y = tempObject.getY() - height;
					velY = 0;
					falling = false;
					jumping = false;
					Game.jumps = 0;
				} else {
					falling = true;
				}

				// Right Collision
				if (getBoundsRight().intersects(tempObject.getBounds())) {
					x = tempObject.getX() - 32;

				}

				// Left Collision
				if (getBoundsLeft().intersects(tempObject.getBounds())) {
					x = tempObject.getX() + 32;

				}

			}
		}

	}

	public void render(Graphics g) {

		g.drawImage(tex.player[0], (int) x, (int) y, null);

	}

	public Rectangle getBounds() {
		return new Rectangle((int) ((int) x + (width / 2) - ((width / 2) / 2)), (int) ((int) y + (height / 2)),
				(int) width / 2, (int) height / 2);
	}

	public Rectangle getBoundsTop() {
		return new Rectangle((int) ((int) x + (width / 2) - ((width / 2) / 2)), (int) (int) y, (int) width / 2,
				(int) height / 2);
	}

	public Rectangle getBoundsRight() {
		return new Rectangle((int) ((int) x + width - 5), (int) y + 5, (int) 5, (int) height - 16);
	}

	public Rectangle getBoundsLeft() {
		return new Rectangle((int) x, (int) y + 5, (int) 5, (int) height - 16);
	}

}
