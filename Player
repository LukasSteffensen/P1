package com.Lukas.Mario.platformer.objects;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.LinkedList;

import com.Lukas.Mario.Window.Camera;
import com.Lukas.Mario.Window.Game;
import com.Lukas.Mario.Window.Handler;
import com.Lukas.Mario.platformer.framework.GameObject;
import com.Lukas.Mario.platformer.framework.ObjectId;
import com.Lukas.Mario.platformer.framework.Texture;

public class Player extends GameObject{

	private float width = 32, height = 64; // size of the player

	private float gravity = 0.35f; // the amount of force from above (gravity)
	private final float MAX_SPEED = 10; // max speed of the player (not actual speed)

	private Handler handler;

	Texture tex = Game.getInstance();


	public Player(float x, float y, Handler handler, Camera cam, ObjectId id) { // camera follows the player?
		super(x, y, id);
		this.handler = handler;
	}

	public void tick(LinkedList<GameObject> object) {
		x += velX;
		y += velY;

		if(Game.score >= 100) { // if you get a score of 100, you go back to score 0 and gain an extra life
			Game.score = 0; // -11-
			Game.lives++; // -11-
		}


		if(Game.hp == 0) {
			Game.lives--;
			y = 400;
			velY = 0;
			x = 100;
		}

		if(Game.lives == 0) { // placement of the player once you have 0 lives
			y = 96; // -11-
			x = 100; // -11-
		}

		if(falling || jumping) {
			velY += gravity; // if the goomba jumps or falls, gravity will apply


			if(velY > MAX_SPEED)
				velY = MAX_SPEED;


		}
		Collision(object);
	}

	private void Collision(LinkedList<GameObject> object) {
		for(int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);

			if(tempObject.getId() == ObjectId.InfoBlock) {
				// top Collision
				if(getBoundsTop().intersects(tempObject.getBoundsTop())) {
					y = tempObject.getY() + 32;
					velY = 0;
					Game.info1++; // the player collects info if (s)he hits the info block?
				}

				// Bottom Collision
				if(getBounds().intersects(tempObject.getBounds())) {
					y = tempObject.getY() - height;
					velY = 0;
					falling = false;
					jumping = false;
				}else {
					falling = true; // allows the player to fall if there isn't a block below
				}

				// Right Collision
				if(getBoundsRight().intersects(tempObject.getBounds())) {
					x = tempObject.getX() - 32;

				}

				// Left Collision
				if(getBoundsLeft().intersects(tempObject.getBounds())) {
					x = tempObject.getX() + 32;

				}

			}


			if(tempObject.getId() == ObjectId.Enemy) {

				if(getBoundsTop().intersects(tempObject.getBounds())) {
					y = 400;
					velY = 0;
					x = 100;
					Game.lives--;
				}

				if(getBounds().intersects(tempObject.getBoundsTop())) {
					handler.removeObject(tempObject);
					Game.score += 25;
					Game.kills++;
				}

				if(getBoundsRight().intersects(tempObject.getBoundsLeft())) {
					y = 400;
					velY = 0;
					x = 100;
					Game.lives--;
				}

				if(getBoundsLeft().intersects(tempObject.getBoundsRight())) {
					y = 400;
					velY = 0;
					x = 100;
					Game.lives--;
				}
			}

			if(tempObject.getId() == ObjectId.Block) {
				// Top Collision
				if(getBoundsTop().intersects(tempObject.getBounds())) {
					y = tempObject.getY() + 32;
					velY = 0;

				}

				// Bottom Collision
				if(getBounds().intersects(tempObject.getBounds())) {
					y = tempObject.getY() - height;
					velY = 0;
					falling = false;
					jumping = false;
					Game.jumps = 0;
				}else {
					falling = true;
				}


				// Right Collision
				if(getBoundsRight().intersects(tempObject.getBounds())) {
					x = tempObject.getX() - 32; // reverse effect on the player when hitting the wall at the right

				}

				// Left Collision
				if(getBoundsLeft().intersects(tempObject.getBounds())) {
					x = tempObject.getX() + 32; // reverse effect on the player when hitting the wall at the left

				}


			}

			if(tempObject.getId() == ObjectId.DeathBlock) {
				// Top Collision
				if(getBoundsTop().intersects(tempObject.getBounds())) {
					y = tempObject.getY() + 32;
					velY = 0;
				}

				// Bottom Collision
				if(getBounds().intersects(tempObject.getBounds())) {
					y = 400;
					velY = 0;
					x = 100;
					Game.lives--;
				}

				// Right Collision
				if(getBoundsRight().intersects(tempObject.getBounds())) {
					x = tempObject.getX() - 32;

				}

				// Left Collision
				if(getBoundsLeft().intersects(tempObject.getBounds())) {
					x = tempObject.getX() + 32;

				}

			}
			if(tempObject.getId() == ObjectId.Coin) {
				
				// Top Collision
				if(getBoundsTop().intersects(tempObject.getBounds())) {
					handler.removeObject(tempObject);
					Game.score++; // gains an extra ticket when running into a coin
				}

				// Bottom Collision
				if(getBounds().intersects(tempObject.getBounds())) {
					handler.removeObject(tempObject);
					Game.score++; // gains an extra ticket when running into a coin
				}

				// Right Collision
				if(getBoundsRight().intersects(tempObject.getBounds())) {
					handler.removeObject(tempObject);
					Game.score++; // gains an extra ticket when running into a coin

				}

				// Left Collision
				if(getBoundsLeft().intersects(tempObject.getBounds())) {
					handler.removeObject(tempObject);
					Game.score++; // gains an extra ticket when running into a coin

				}
			}
			

			if(tempObject.getId() == ObjectId.Flag) {
				// switch level
				if(getBounds().intersects(tempObject.getBounds())) {
					handler.switchLevel();
				}
			}

		}

	}


	public void render(Graphics g) {
		g.setColor(Color.blue); // the blue rectangle will be replaced by the player texture
		g.drawImage(tex.player[0], (int)x, (int)y, null); // -11-
		//g.drawRect((int) ((int)x + (width/2) - ((width/2) / 2)), (int) ((int)y + (height/2)), (int)width/2, (int)height/2);
		//g.drawRect((int) ((int)x + (width / 2) - ((width/2) / 2)), (int) (int)y, (int)width/2, (int)height/2);
		//g.drawRect((int) ((int)x + width - 5), (int)y + 5, (int)5, (int)height-16);
		//g.drawRect((int) (int)x, (int)y + 5, (int)5, (int)height-16);
		// Above: Invisible barriers for when the player collides with other objects


	}

	public Rectangle getBounds() {
		return new Rectangle((int) ((int)x + (width/2) - ((width/2) / 2)), (int) ((int)y + (height/2)), (int)width/2, (int)height/2);
	}

	public Rectangle getBoundsTop() {
		return new Rectangle((int) ((int)x + (width / 2) - ((width/2) / 2)), (int) (int)y, (int)width/2, (int)height/2);
	}

	public Rectangle getBoundsRight() {
		return new Rectangle((int) ((int)x + width - 5), (int)y + 5, (int)5, (int)height-16);
	}

	public Rectangle getBoundsLeft() {
		return new Rectangle((int)x, (int)y + 5, (int)5, (int)height-16);
	}

}
