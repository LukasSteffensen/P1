package com.Lukas.Mario.platformer.objects;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.LinkedList;
import java.util.Random;

import com.Lukas.Mario.Window.Game;
import com.Lukas.Mario.Window.Handler;
import com.Lukas.Mario.platformer.framework.GameObject;
import com.Lukas.Mario.platformer.framework.ObjectId;
import com.Lukas.Mario.platformer.framework.Texture;

public class SuperGoomba extends GameObject { // The super Goomba is a copy of the goomba, except for the VelX and jumping.

	private float width = 32, height = 32;
	
	
	private float gravity = 0.35f;
	private final float MAX_SPEED = 10;
	private int velX = -4;
	private Handler handler;
	Random r = new Random();

	Texture tex = Game.getInstance();

	public SuperGoomba(float x, float y, int type, Handler handler, ObjectId id) {
		super(x, y, id);
		this.handler = handler;
	
	}

	public void tick(LinkedList<GameObject> object) {
		x += velX;
		y += velY;
		

		if (falling || jumping) {
			
			velY += gravity;

			if (velY > MAX_SPEED)
				velY = MAX_SPEED;
			int jump = r.nextInt(50); // The Goomba jumps randomly, making it harder to avoid.
			if (jump == 0 && jumping == false) {
				velY += -5;
				jumping = true;
			}
		}
		
		

		collision(object);
	}

	public void reverse() {
		velX *= -1;
	}

	private void collision(LinkedList<GameObject> object) {
		for (int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);

			if (tempObject.getId() == ObjectId.Block) {

				if (getBounds().intersects(tempObject.getBounds())) {
					y = tempObject.getY() - height;
					velY = 0;
					falling = false;
					jumping = false;
				} else {
					falling = true;
				}

				if (getBoundsLeft().intersects(tempObject.getBounds())) {
					x = tempObject.getX() + width + 2;
					reverse();
				}
				if (getBoundsRight().intersects(tempObject.getBounds())) {
					x = tempObject.getX() - width - 2;
					reverse();
				}
			}
			if (tempObject.getId() == ObjectId.DeathBlock) {

				if (getBounds().intersects(tempObject.getBounds())) {

					y = tempObject.getY() - height;
					falling = false;
				}else {
					falling = true;
				}
				
				if (getBoundsLeft().intersects(tempObject.getBounds())) {
					x = tempObject.getX() + width + 8;
					reverse();
				}
				
				if (getBoundsRight().intersects(tempObject.getBounds())) {
					x = tempObject.getX() - width - 8;
					reverse();
				}
			}
		}
	}
	

	public void render(Graphics g) {
		g.drawImage(tex.block[12], (int) x, (int) y, null);
	}

	public Rectangle getBoundsTop() {
		return new Rectangle((int) x, (int) y, 32, (int) height / 8);
	}

	public Rectangle getBounds() {
		return new Rectangle((int) x, (int) ((int) y + (height)), 32, (int) height / 8);
	}

	public Rectangle getBoundsRight() {
		return new Rectangle((int) ((int) x + width - 5), (int) y + 5, (int) 5, (int) height - 10);
	}

	public Rectangle getBoundsLeft() {
		return new Rectangle((int) x, (int) y + 5, (int) 5, (int) height - 10);
	}
}
