package com.Lukas.Mario.Window;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

import com.Lukas.Mario.Window.Game.STATE;
import com.Lukas.Mario.platformer.framework.KeyInput;
import com.Lukas.Mario.platformer.framework.Texture;

public class Menu extends MouseAdapter{
	
	Game game;
	Handler handler;
	public BufferedImage level = null;
	
	public Menu(Game game, Handler handler) {
		this.game = game;
		this.handler = handler;
	}
	
	public void mousePressed(MouseEvent e) {
		
		int mouseX = e.getX(); // it finds the position of x when clicking the mouse
		int mouseY = e.getY(); // it finds the position of y when clicking the mouse
		
		if(game.state == STATE.MENU) {
		if (mouseOver(mouseX, mouseY, Game.WIDTH / 2 - 150, 170, 300, 82)) { // The game will start when clicking "Play"
			game.state = STATE.GAME;	

			BufferedImageLoader loader = new BufferedImageLoader();
			level = loader.loadImage("/real_level.png"); // load the premade level
			
			handler.LoadImageLevel(level);
		}
		
		if (mouseOver(mouseX, mouseY, Game.WIDTH / 2 - 150, 300, 300, 82)) { // When clicking "Instructions", 
			game.state = STATE.INSTRUCTIONS;
		}
		
		if (mouseOver(mouseX, mouseY, Game.WIDTH / 2 - 150, 430, 300, 82)) {
			System.exit(1);
		}
		
		}else if(game.state == STATE.INSTRUCTIONS) {
			if (mouseOver(mouseX, mouseY, Game.WIDTH / 2 - 150, 430, 300, 82)) {
				game.state = STATE.MENU;
			}
		}
	}
	
	private boolean mouseOver(int mouseX, int mouseY, int x, int y, int width, int height) { // checks whether our mouse coordinates is in the same area as the buttons
		if(mouseX > x && mouseX < x + width) {
			if(mouseY > y && mouseY < y + height) {
				return true; // when clicking the mouse, the x and y value are both within the button's boundaries, and you will open up the button that you click on
			} else return false; // when clicking the mouse, the x value is inside the button's left and right boundaries. However the y value is not - and nothing will happen
		} else return false; // when clicking the mouse, if the x value is not within the button's left and right boundaries, nothing will happen
	}
	
	public void mouseReleased(MouseEvent e) {
		
	}
	
	public void tick() {
		
	}
	
	
	public Rectangle playButton = new Rectangle(Game.WIDTH / 2 - 150, 170, 300, 82); // placement and size of button (without text)
	public Rectangle instructionsButton = new Rectangle(Game.WIDTH / 2 - 150, 300, 300, 82); // placement and size of button (without text)
	public Rectangle quitButton = new Rectangle(Game.WIDTH / 2 - 150, 430, 300, 82); // placement and size of button (without text)
	public Rectangle backButton = new Rectangle(Game.WIDTH / 2 - 150, 430, 300, 82);
	
	public void render(Graphics g) {
		Graphics2D g2d = (Graphics2D) g;
		
		if(game.state == STATE.MENU) {
		Font hudMenu1 = new Font("gtubh", Font.ITALIC, 50); // title font
		Font hudMenu2 = new Font("gtubh", Font.ITALIC, 35); // subtitle/menu font
		g.setFont(hudMenu1); // we use this font
		g.setColor(Color.WHITE); // color of text 
		g.drawString("Couch-Voter Carnival", Game.WIDTH / 2 - 230, 100); // drawing the title
		
		g2d.draw(playButton); // draws the button
		g2d.draw(instructionsButton); // draws the button
		g2d.draw(quitButton); // draws the button
		
		g.setFont(hudMenu2); // we use this font
		g.drawString("Play", Game.WIDTH /2 - 40, 220); // drawing the play text
		g.drawString("Instructions", Game.WIDTH /2 - 85, 350); // drawing the instructions text
		g.drawString("Quit", Game.WIDTH /2 - 40, 480); // drawing the quit text
		}else if(game.state == STATE.INSTRUCTIONS) {
			Font hudMenu1 = new Font("gtubh", Font.ITALIC, 50); // title font
			Font hudMenu2 = new Font("gtubh", Font.ITALIC, 35); // subtitle/menu font
			g.setFont(hudMenu1); // we use this font
			g.setColor(Color.WHITE); // color of text 
			
			g2d.draw(backButton); // draws the button
			g.setFont(hudMenu2); // we use this font
			g.drawString("Back", Game.WIDTH /2 - 40, 480); // drawing the back text
		}

	}

}
